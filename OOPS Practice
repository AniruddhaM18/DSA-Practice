import java.security.Key;
import java.util.*;
public class Recursion {
    public static void printDecending(int n){
        if(n == 1){
            System.out.println(n);
            return;
        }
        System.out.print(n+" ");
        printDecending(n-1);
    }

    public static void printInc(int n){
        if(n == 1) {
            System.out.print(n+" ");
            return;
        }
        printInc(n - 1);
        System.out.print(n+" ");
    }

    public static int fact(int n) {
        if(n == 0){
            return 1;
        }
        int fnm1 = fact(n-1);
        int fn = n* fact(n-1);
        return fn;   
    }

    public static int calcSum(int n){
        if(n == 1) {
            return 1;
        }
        int Snm1 = calcSum(n-1);
        int Sn = n + Snm1;
        return Sn;
    }

    //calculate nth term in fibonacci 
    public static int fib(int n){
        if(n == 0 || n == 1) {
            return n;
        }
        int fnm1 = fib(n-1);
        int fnm2 = fib(n-2);
        int fn = fnm1 + fnm2;
        return fn;
    }

    public static boolean isSorted(int arr[], int i){
        if(i == arr.length-1) {
            return true;
        }
        if(arr[i] > arr[i+1]) {
            return false;
        }
        return isSorted(arr, i+1);
    }

    public static int firstOccurance(int arr[], int key,  int i) {
        if(i == arr.length) {
            return -1;
        }
        if(arr[i]== key) {
            return i;
        }
        return firstOccurance(arr, key, i+1);
    }


    public static int lastOccurance(int arr[], int key,  int i) {
        if(i == arr.length) {
            return -1;
        }
        int isFound = lastOccurance(arr, key, i+1);
        if(isFound == -1 && arr[i] == key) {
            return i;
        }
        return isFound;
    }

    public static int power(int x, int n) {
        if(n == 0) {
            return 1;
        }
        int xnm1 = power(x, n-1);
        int xn = x* xnm1;
        return xn;
        
    }

    public static int tilingProblem(int n) {
        //base case
        if(n == 0 || n ==1) {
            return 1;
        }
        //work
        // vertical choice
        int fnm1 = tilingProblem(n-1);
        // horizontal choice
        int fnm2 = tilingProblem(n-2);
        //total ways
        int totways = fnm1+fnm2;
        return totways;
    }

    public static void removeDuplicates(String str, int idx, StringBuilder newStr, boolean map[]) {
        if(idx == str.length()) {
            System.out.println(newStr);
            return;
        }
        //kaam/work
        char currChar = str.charAt(idx);
        if(map[currChar-'a'] == true) {
            //duplicate
            removeDuplicates(str, idx+1, newStr, map);
        } else {
            map[currChar-'a'] = true;
            removeDuplicates(str, idx+1, newStr.append(currChar), map);
        }
    }

    public static int friendsPairing(int n) {
        if(n == 1 || n == 2) {
            return n;
        }
        //choices
        //single
        int fnm1 = friendsPairing(n-1);
        // pairing
        int fnm2 = friendsPairing(n-2);
        int pairWays = (n-1) * fnm2;

        //total ways
        int total = fnm1 + pairWays;
        return total;
    }

    public static void printBinaryStr(int n, int lastPllace, String str){
        //base case
        if(n == 0) {
            System.out.println(str);
            return;
        }
        //work/kaam
        printBinaryStr(n-1, 0, str+"0");
        if(lastPllace == 0) {
            printBinaryStr(n-1, 1, str+"1");
        }

    }
    public static void main(String[] args) {
        printBinaryStr(3, 0, "");
    }
}
